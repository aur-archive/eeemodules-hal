--- asus_acpi.c.orig	2009-06-28 21:39:27.000000000 -0400
+++ asus_acpi.c	2009-06-28 21:40:25.000000000 -0400
@@ -36,6 +36,7 @@
 #include <linux/types.h>
 #include <linux/proc_fs.h>
 #include <linux/backlight.h>
+#include <linux/version.h>
 #include <acpi/acpi_drivers.h>
 #include <acpi/acpi_bus.h>
 #include <asm/uaccess.h>
@@ -158,10 +159,15 @@
 static int eeepc_hotk_add(struct acpi_device *device);
 static int eeepc_hotk_remove(struct acpi_device *device, int type);
 
+static const struct acpi_device_id eee_device_ids[] = {
+	{EEEPC_HOTK_HID, 0},
+	{"", 0}
+};
+
 static struct acpi_driver eeepc_hotk_driver = {
 	.name = "eeepc_acpi",
 	.class = EEEPC_HOTK_CLASS,
-	.ids = EEEPC_HOTK_HID,
+	.ids = eee_device_ids,
 	.ops = {
 		.add = eeepc_hotk_add,
 		.remove = eeepc_hotk_remove,
@@ -547,7 +553,7 @@
 static struct acpi_driver asus_hotk_driver = {
 	.name = "asus_acpi",
 	.class = ACPI_HOTK_CLASS,
-	.ids = ACPI_HOTK_HID,
+	.ids = eee_device_ids,
 	.ops = {
 		.add = asus_hotk_add,
 		.remove = asus_hotk_remove,
@@ -1050,7 +1056,9 @@
 	proc->write_proc = writefunc;
 	proc->read_proc = readfunc;
 	proc->data = acpi_driver_data(device);
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
 	proc->owner = THIS_MODULE;
+	#endif
 	proc->uid = asus_uid;
 	proc->gid = asus_gid;
 	return 0;
@@ -1083,7 +1091,9 @@
 	if (proc) {
 		proc->read_proc = proc_read_info;
 		proc->data = acpi_driver_data(device);
+		#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
 		proc->owner = THIS_MODULE;
+		#endif
 		proc->uid = asus_uid;
 		proc->gid = asus_gid;
 	} else {
@@ -1178,7 +1188,7 @@
 		hotk->brightness = (event & ~((u32) BR_DOWN));
 	}
 
-	acpi_bus_generate_event(hotk->device, event,
+	acpi_bus_generate_proc_event(hotk->device, event,
 				hotk->event_count[event % 128]++);
 
 	return;
@@ -1394,7 +1404,7 @@
 	hotk->handle = device->handle;
 	strcpy(acpi_device_name(device), ACPI_HOTK_DEVICE_NAME);
 	strcpy(acpi_device_class(device), ACPI_HOTK_CLASS);
-	acpi_driver_data(device) = hotk;
+	device->driver_data = hotk;
 	hotk->device = device;
 
 	result = asus_hotk_check();
@@ -1494,8 +1504,9 @@
 		printk(KERN_ERR "Asus ACPI: Unable to create /proc entry\n");
 		return -ENODEV;
 	}
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
 	asus_proc_dir->owner = THIS_MODULE;
-
+	#endif
 	result = acpi_bus_register_driver(&asus_hotk_driver);
 	if (result < 0) {
 		remove_proc_entry(PROC_ASUS, acpi_root_dir);
@@ -1626,7 +1637,9 @@
 	proc->write_proc = eeepc_hotk_reset_init;
 	proc->read_proc = NULL;
 	proc->data = NULL;
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
 	proc->owner = THIS_MODULE;
+	#endif
 	proc->uid = eeepc_uid;
 	proc->gid = eeepc_gid;
 	return 0;
@@ -1644,7 +1657,9 @@
 	proc->write_proc = eeepc_hotk_write_proc;
 	proc->read_proc = eeepc_hotk_read_proc;
 	proc->data = (void*)cm;
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
 	proc->owner = THIS_MODULE;
+	#endif
 	proc->uid = eeepc_uid;
 	proc->gid = eeepc_gid;
 	return 0;
@@ -1785,7 +1800,7 @@
 				event = 0x11;
 		}
 	}
-	acpi_bus_generate_event(ehotk->device, event, ehotk->event_count[event % 128]++);
+	acpi_bus_generate_proc_event(ehotk->device, event, ehotk->event_count[event % 128]++);
 
 	return;
 }
@@ -1809,7 +1824,7 @@
 	ehotk->handle = device->handle;
 	strcpy(acpi_device_name(device), EEEPC_HOTK_DEVICE_NAME);
 	strcpy(acpi_device_class(device), EEEPC_HOTK_CLASS);
-	acpi_driver_data(device) = ehotk;
+	device->driver_data = ehotk;
 	ehotk->device = device;
 
 	result = eeepc_hotk_check();
@@ -1877,8 +1892,9 @@
 		printk(KERN_ERR "Asus ACPI: Unable to create /proc entry\n");
 		return -ENODEV;
 	}
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
 	eeepc_proc_dir->owner = THIS_MODULE;
-
+	#endif
 	init_flag = DISABLE_ASL_WLAN|DISABLE_ASL_DISPLAYSWITCH;
 
 	result = acpi_bus_register_driver(&eeepc_hotk_driver);
